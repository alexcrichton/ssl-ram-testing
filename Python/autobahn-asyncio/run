#!py34/bin/python
import asyncio
import os
import ssl

from autobahn.asyncio.websocket import WebSocketServerProtocol, \
    WebSocketServerFactory

PORT = int(os.environ.get("SERVER_PORT", "9000"))


class MyServerProtocol(WebSocketServerProtocol):
    def onMessage(self, payload, isBinary):
        self.sendMessage(payload, isBinary)


if __name__ == '__main__':
    if os.environ.get("USE_SSL"):
        factory = WebSocketServerFactory("wss://localhost:%s" % PORT,
                                         debug=False)
        factory.protocol = MyServerProtocol
        ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
        ctx.load_cert_chain("../../keys/server.crt",
                            keyfile="../../keys/server.key")

        loop = asyncio.get_event_loop()
        coro = loop.create_server(factory, '127.0.0.1', PORT, ssl=ctx)
    else:
        factory = WebSocketServerFactory("ws://localhost:%s" % PORT,
                                         debug=True)
        factory.protocol = MyServerProtocol
        loop = asyncio.get_event_loop()
        coro = loop.create_server(factory, '127.0.0.1', PORT)

    server = loop.run_until_complete(coro)
    print("Running")

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    finally:
        server.close()
        loop.close()
