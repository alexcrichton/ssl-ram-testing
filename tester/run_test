#!/usr/bin/env python2.7
"""SSL RAM Overhead Tester

Usage:
    run_test.py <test_dir>

Options:
    -h --help       Show this screen.

"""
import os
import re
import shlex
import subprocess
import sys
import time
import threading
import Queue

from docopt import docopt
import psutil

here_dir = os.path.dirname(os.path.abspath(__file__))


class Process(object):
    """Simplify running of the test process"""
    def __init__(self, command, env=None):
        parts = os.path.split(command)
        rel_dir, cmd = [os.path.join(*parts[:-1]), parts[-1]]
        self.process_dir = os.path.join(os.path.abspath(os.getcwd()),
                                        rel_dir)
        self.env = env or os.environ
        self.command = shlex.split(os.path.join(self.process_dir, cmd))
        self.proc = None
        self.output_thread = threading.Thread(target=self.consume_output)
        self.output = Queue.Queue()
        self.should_consume = True
        if not os.path.exists(command):
            raise Exception("Unable to find command: %s" % command)

    def run(self):
        """Start the process running, and capture its output to the output
        queue"""
        self.proc = subprocess.Popen(self.command,
                                     cwd=self.process_dir,
                                     env=self.env,
                                     stdout=subprocess.PIPE,
                                     bufsize=-1)
        if self.is_running():
            self.output_thread.start()

    def terminate(self):
        """Terminate the process if its running and halt the output collector
        thread"""
        if self.proc:
            self.proc.terminate()
            if self.output_thread.is_alive():
                self.should_consume = False
                self.output_thread.join()

    def is_running(self):
        """Indicate if the program is running."""
        return not self.proc or self.proc.poll() is None

    def process_line(self, line):
        """Placeholder function for specialized processing of output lines"""

    def consume_output(self):
        """Started in a separate thread, consumes input and feeds each line
        into the output queue"""
        while self.should_consume:
            line = self.proc.stdout.readline()
            self.process_line(line)
            self.output.put(line.rstrip("\n"))

    def get_output(self):
        """Helper function that pulls all output off the output queue until
        none remains and returns it as a list of lines."""
        line = True
        lines = []
        while line:
            try:
                line = self.output.get_nowait()
                lines.append(line)
                self.output.task_done()
            except Queue.Empty:
                line = False
        return lines

    def wait_for_output_stop(self, interval=2):
        """Monitor the task until no output is emitted for ``interval``
        seconds"""
        while True:
            if not self.is_running():
                raise Exception("Program (%s) is not running." % self.command)
            if not self.get_output():
                return True
            time.sleep(interval)

    def rss_usage(self):
        """Report total RSS memory usage for the process and any child
        processes"""
        if not self.proc.pid:
            return None
        p = psutil.Process(self.proc.pid)
        return sum([x.get_memory_info()[0] for x in
                   [p] + p.get_children(recursive=True)])


class TestProcess(Process):
    """Specialized Process sub-class that tracks client count output"""
    count_re = re.compile(r".*?Clients=(\d+)")

    def __init__(self, command, env=None):
        super(TestProcess, self).__init__(command, env)
        self.client_count = 0

    def process_line(self, line):
        """Match the line and update the client count as needed"""
        result = self.count_re.match(line)
        if result:
            self.client_count = int(result.group(1))

    def wait_for(self, watched_program, total=1000, max_time=60):
        """Wait until our client total has hit the total, don't wait
        more than the max_time"""
        start = time.time()
        rss = watched_program.rss_usage()
        results = [(start, rss, self.client_count)]
        while self.client_count != total and (time.time()-start) <= max_time:
            time.sleep(1)
            results.append((int(time.time()), watched_program.rss_usage(),
                            self.client_count))

        return (self.client_count == total, results)


def wait_on_memory(proc, interval=60, max_time=360, tester=None):
    """Wait until memory hasn't increased in the past interval seconds, don't
    wait more than max_time for this to settle.

    :returns: Tuple indicating if memory every stopped increasing, and a
              list of tuples corresponding to time, and RSS usage.

    """
    start = time.time()
    max_mem = mem_now = proc.rss_usage()
    interval_start = time.time()
    results = []
    now = time.time()
    while now-start <= max_time and now-interval_start < interval:
        mem_now = proc.rss_usage()
        if tester:
            results.append((int(now), mem_now, tester.client_count))
        else:
            results.append((int(now), mem_now, 0))
        now = time.time()
        if mem_now > max_mem:
            interval_start = now
            max_mem = mem_now
        wait_len = int(now-start)
        int_len = int(now-interval_start)
        sys.stdout.write("Waiting: {0}  Last Memory Increase: {1}{2}\r".format(
                         wait_len, int_len, " "*10))
        sys.stdout.flush()
        time.sleep(1)
    sys.stdout.write("\n")
    return (now-interval_start >= interval, results)


def run_test(script_name, use_ssl=False):
    env = os.environ.copy()
    if use_ssl:
        env["USE_SSL"] = "true"

    env["PING_INTERVAL"] = "10"

    program = Process(script_name, env=env)
    program.run()
    time.sleep(5)
    program.wait_for_output_stop()

    results = []
    total_rss = program.rss_usage()
    results.append((int(time.time()), total_rss, 0))
    print "Program started."

    # Spin up the tester
    tester = TestProcess(os.path.join(here_dir, "client"), env=env)
    tester.run()
    print "Tester started."
    connected, mem_results = tester.wait_for(program)
    if not connected:
        print "WARNING: Failed to connect all clients"
    results.extend(mem_results)

    print "Tester finished connecting."
    stopped, mem_results = wait_on_memory(program, tester=tester)
    if not stopped:
        print "WARNING: Program hasn't stopped increasing."
    else:
        print "Program memory stopped increasing."
    results.extend(mem_results)
    new_total = program.rss_usage()
    results.append((int(time.time()), new_total, tester.client_count))
    print "Started with: %s" % total_rss
    print "Ended with: %s" % new_total

    per_conn = (float(new_total) - total_rss) / tester.client_count / 1024
    print "kB per connection: %0.2f" % per_conn

    tester.terminate()
    program.terminate()
    return per_conn, tester.client_count, results


def rewrite_results(results):
    """Takes a list of tuples (time, memory), and rewrites the time to start
    at 0"""
    origin = results[0][0]
    return [(x-origin, y, z) for x, y, z in results]


def test_filename(script_name, prefix):
    now = time.time()
    result_filename = "%s-%s-%d.dat" % (script_name.replace("/", "_"), prefix,
                                        now)
    return result_filename


def create_memory_results_list(nossl_results, ssl_results):
    """Takes a list of SSL and NoSSL result tuples with client counts and
    creates a single unified list of SSL and NoSSL results

    This result list does not include client counts.

    """
    nossl_dict = {t: rss for t, rss, _ in nossl_results}
    ssl_dict = {t: rss for t, rss, _ in ssl_results}

    results = []
    prior_ssl_result = ssl_results[0][1]
    prior_nossl_result = nossl_results[0][1]
    for n in range(max(ssl_results[-1][0], nossl_results[-1][0])+1):
        ssl_rss = ssl_dict.get(n, prior_ssl_result)
        nossl_rss = nossl_dict.get(n, prior_nossl_result)
        prior_ssl_result = ssl_rss
        prior_nossl_result = nossl_rss
        results.append((n, nossl_rss, ssl_rss))
    return results


def per_conn(base_rss, current_rss, count):
    return 0 if count == 0 else (current_rss-base_rss) / count


def create_perconn_results_list(nossl_results, ssl_results):
    """Takes a list of SSL and NoSSL result tuples with client counts and
    returns a list with per-connection memory use over time."""
    nossl_origin_memory = nossl_results[0][1]
    ssl_origin_memory = ssl_results[0][1]
    nossl_dict = {t: per_conn(nossl_origin_memory, rss, count) for
                  t, rss, count in nossl_results}
    ssl_dict = {t: per_conn(ssl_origin_memory, rss, count) for
                t, rss, count in ssl_results}

    results = []
    prior_ssl_conn = prior_nossl_conn = 0
    for n in range(max(ssl_results[-1][0], nossl_results[-1][0])+1):
        ssl_conn = ssl_dict.get(n, prior_ssl_conn)
        nossl_conn = nossl_dict.get(n, prior_nossl_conn)
        prior_ssl_conn = ssl_conn
        prior_nossl_conn = nossl_conn
        results.append((n, nossl_conn, ssl_conn))
    return results


if __name__ == '__main__':
    if not os.path.exists("./results"):
        os.mkdir("results")
    arguments = docopt(__doc__, version='SSL RAM Overhead Tester 1.0')
    script_name = os.path.join(arguments["<test_dir>"], "run")
    if not os.path.exists(script_name):
        raise Exception("Failed to find program: %s" % script_name)

    print "No SSL"
    no_ssl_conns, count, results = run_test(script_name)
    nossl_results = rewrite_results(results)

    print "\n"
    print "SSL"
    ssl_conns, ssl_count, results = run_test(script_name, use_ssl=True)
    ssl_results = rewrite_results(results)

    nossl_dict = {k: (r, c) for k, r, c in nossl_results}
    ssl_dict = {k: (r, c) for k, r, c in ssl_results}

    # Build a list of tuples. (time, nossl_rss, ssl_rss). Substitute last value
    # of any missing values.
    result_filename = test_filename(arguments["<test_dir>"], "rss")
    results = create_memory_results_list(nossl_results, ssl_results)
    with open("results/" + result_filename, "w") as f:
        f.write("# MEMORY USE FOR: %s\n#\n" % script_name)
        f.write("TYPE\tNO_SSL\tSSL\n")
        for t, nossl_rss, ssl_rss in results:
            f.write("%s\t%s\t%s\n" % (t, nossl_rss, ssl_rss))

    result_filename = test_filename(arguments["<test_dir>"], "perconn")
    results = create_perconn_results_list(nossl_results, ssl_results)
    with open("results/" + result_filename, "w") as f:
        f.write("# MEMORY USE PER CONNECTION FOR: %s\n#\n" % script_name)
        f.write("TYPE\tNO_SSL\tSSL\n")
        for t, nossl_conn, ssl_conn in results:
            f.write("%s\t%s\t%s\n" % (t, nossl_conn, ssl_conn))

    print "\nSSL Overhead per Conn: %0.2f" % (ssl_conns-no_ssl_conns)
